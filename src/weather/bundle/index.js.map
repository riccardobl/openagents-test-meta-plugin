{
  "version": 3,
  "sources": ["../../lib/Job.cjs", "../../lib/Nostr.cjs", "../index.js"],
  "sourcesContent": ["const {\n    Job_log,\n    Job_get,\n    Job_isDone,\n    Job_newInputEventRef,\n    Job_newInputJobRef,\n    Job_newInputData,\n    Job_newParam,\n    Job_request,\n    Job_waitFor\n} = Host.getFunctions()\n\n\nclass Job {\n    /**\n     * Log a message for the current job\n     * @param {string} message \n     */\n    static async log(tx) {\n        console.log(tx);\n        const mem = Memory.fromString(tx);\n        await Job_log(mem.offset);\n    }\n\n\n    /**\n     * Get a job by its id\n     * @param {string} jobId the job id, if not provided, returns the current job\n     * @returns {object}\n     */\n    static async get(jobId){\n        const mem = Memory.fromString(jobId||\"\");\n        const respOffset =await Job_get(mem.offset);\n        return Memory.find(respOffset).readJsonObject();\n    }\n\n    /**\n     * Check if a job is done\n     * @param {string} jobId \n     * @returns {boolean}\n     */\n    static async isDone(jobId){\n        const mem=Memory.fromString(jobId);\n        const resp=await Job_isDone(mem.offset);\n        return resp==1;     \n    }\n\n\n    /**\n     * Create a new input that references to an event\n     * @param {string} eventId  The event id\n     * @param {string} marker  Optional marker for the input\n     * @param {string} sourceRelay  Optional relay where the event is found\n     * @returns {object} The input\n     */\n    static async newInputEventRef(eventId, marker, sourceRelay){\n        if (!sourceRelay) sourceRelay=\"\";\n        if(!marker) marker=\"\";\n        const memEventId=Memory.fromString(eventId);\n        const memMarker=Memory.fromString(marker);\n        const memSourceRelay=Memory.fromString(sourceRelay);\n        const respOffset =await Job_newInputEventRef(memEventId.offset, memMarker.offset, memSourceRelay.offset);\n        return Memory.find(respOffset).readJsonObject();\n    }\n    \n    /**\n     * Create a new input that references to a job\n     * @param {string} jobId  The job id\n     * @param {string} marker Optional marker for the input\n     * @param {string} sourceRelay Optional relay where the job is found\n     * @returns {object} The input\n     */\n    static async newInputJobRef(jobId, marker, sourceRelay){\n        if (!sourceRelay) sourceRelay=\"\";\n        if(!marker) marker=\"\";\n        const memJobId=Memory.fromString(jobId);\n        const memMarker=Memory.fromString(marker);\n        const memSourceRelay=Memory.fromString(sourceRelay);\n        const respOffset=await Job_newInputJobRef(memJobId.offset, memMarker.offset, memSourceRelay.offset);\n        return Memory.find(respOffset).readJsonObject();\n    }\n\n\n    /**\n     * Create a new input that contains data\n     * @param {string} data  The data\n     * @param {string} marker Optional marker for the input\n     * @returns {object} The input\n     */\n    static async newInputData(data, marker){\n        if(!marker) marker=\"\";\n        const memData=Memory.fromString(data);\n        const memMarker=Memory.fromString(marker);\n        const respOffset =await Job_newInputData(memData.offset, memMarker.offset);\n        return Memory.find(respOffset).readJsonObject();\n    }\n\n\n    /**\n     * Create a new param\n     * @param {string} name  The name of the param\n     * @param  {...any} values  The values of the param\n     * @returns {object} The param\n     */\n    static async newParam(name, ...values){\n        const valuesJson=JSON.stringify(values);\n        const memName=Memory.fromString(name);\n        const memValues=Memory.fromString(valuesJson)\n        const respOffset =await Job_newParam(memName.offset, memValues.offset);\n        return Memory.find(respOffset).readJsonObject();\n    }\n\n\n    /**\n     * Request a new job\n    {\n            runOn:\"openagents/extism-runtime\",\n            expireAfter:  Date.now()+1000*60*60,\n            description: \"Get zip code info\",\n            inputs: [\n                Job.newInputData(JSON.stringify(subReqInputData))\n            ],\n            params: [\n                Job.newParam(\"main\",\"https://github.com/OpenAgentsInc/plugin-world-zipcode-finder/raw/main/plugin.wasm\")\n            ],\n            kind: undefined,\n            outputFormat: undefined\n        }\n     * @returns {object} The job\n     */\n    static async request(req){    \n        const memReq = Memory.fromString(JSON.stringify(req));\n        const respOffset = await Job_request(memReq.offset);\n        return Memory.find(respOffset).readJsonObject();\n    }\n\n\n    static async waitFor(jobId){\n        jobId = await jobId;\n        const mem = Memory.fromString(jobId);\n        await Job_waitFor(mem.offset);\n        return Job.get(jobId);\n    }\n\n\n    static async pluginRequest(plugin, inputData, description, expireAfter){\n        const req = {\n            runOn: \"openagents/extism-runtime\",\n            expireAfter: expireAfter || Date.now() + 1000 * 60 * 60,\n            description: description||\"\",\n            inputs: [\n                await Job.newInputData(JSON.stringify(inputData))\n            ],\n            params: [\n                await Job.newParam(\"main\", plugin)\n            ],\n            kind: undefined,\n            outputFormat: undefined\n        };\n        const subReqId = (await Job.request(req)).id;\n        return subReqId;\n    }\n}\n\nif(typeof module!=='undefined') module.exports=Job;", "const {\n    Nostr_sendSignedEvent,\n    Nostr_subscribeToEvents,\n    Nostr_unsubscribeFromEvents,\n    Nostr_getEvents \n} = Host.getFunctions()\n\n\nclass Nostr {\n    \n    /**\n     * Send a pre-signed event to Nostr\n     * @param {object} event \n     * @returns {boolean} true if the event was sent\n     */\n    static async sendSignedEvent(event){\n        const eventJson=JSON.stringify(event);\n        const memEvent=Memory.fromString(eventJson);\n        const res =await Nostr_sendSignedEvent(memEvent.offset);\n        return res==1;\n    }\n\n    /**\n     * Subscribe to events\n     * @param {[object]} filters\n     * @returns {string} The subscription id\n     */\n    static async subscribeToEvents(filters){\n        const filterJson = JSON.stringify(filters);\n        const memFilter=Memory.fromString(filterJson);\n        const subIdOffset =await Nostr_subscribeToEvents(memFilter.offset);\n        return Memory.find(subIdOffset).readString();\n    }\n\n    /** \n     * Unsubscribe from events\n     * @param {string} subId\n     * @returns {boolean} true if the subscription was removed \n    */\n    static async unsubscribeFromEvents(subId){\n        const memSubId=Memory.fromString(subId);\n        return await Nostr_unsubscribeFromEvents(memSubId.offset)==1;\n    }\n\n    /**\n     * Get events from a subscription\n     * @param {string} subId \n     * @param {number} limit \n     * @returns {[object]} The events\n     */\n    static async getEvents(subId,limit){\n        if(!limit) limit=0;\n        limit=BigInt(limit);\n        const memSubId=Memory.fromString(subId);\n        const resOffset =await Nostr_getEvents(memSubId.offset,limit);\n        return Memory.find(resOffset).readJsonObject();\n    }\n\n  \n}\n\nif(typeof module!==\"undefined\") module.exports=Nostr;", "const Job = require(\"../lib/Job.cjs\");\nconst Nostr = require(\"../lib/Nostr.cjs\");\n\nasync function run() {\n    const inputData = JSON.parse(Host.inputString());\n    const { latitude, longitude } = inputData;\n\n    Job.log(\"Get weather for \" + latitude+\" \"+longitude);\n \n    // get weather data\n    const meteoUrl = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,wind_speed_10m`;\n    Job.log(\"Fetching weather data from \" + meteoUrl);\n\n    const request = {\n        method: \"GET\",\n        url: meteoUrl,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'\n        }\n    };\n    const response = Http.request(request);\n    if (response.status !== 200) {\n        const errorMessage = `Error ${response.status}: ${response.statusText}`;\n        Job.log(\"Failed \" + errorMessage);\n        Host.outputString(JSON.stringify({ error: errorMessage }));\n        return;\n    }\n    Job.log(\"Completed \" + response.status + \" \" + response.body);\n    const resp=JSON.parse(response.body);\n    const temperature=resp.current.temperature_2m;\n    const windspeed=resp.current.wind_speed_10m;\n\n    Host.outputString(JSON.stringify({\n        temperature: temperature,\n        windspeed: windspeed\n    }));\n}\n\nmodule.exports = { run };"],
  "mappings": "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",
  "names": ["exports", "module", "Job", "exports", "module", "Nostr"]
}
